Command Overview:
...          
**Syntax:** 
â€¢ Commands are given in the following format:
$`command arg1 arg2 ...`
...
**Arguments:**
â€¢ Arguments are separated by spaces. If an argument contains spaces, enclose it in quotes.
$`command arg1 "arg two with spaces" {arg3:isAnObject} ?arg4=alsoAnObject [arg5,is,an,array]`
â€¢ Each argument can use the standard Element variable syntax to handle any data type.
...
**E37 Variable Syntax Primer for Commands:**
â€¢ Special values: true false null undefined
â€¢ Special value aliases: . ! - ? are aliases for true false null and undefined respectively.
â€¢ Numbers: Integers and floats are supported just as they are, e.g. 123 and 1.23
â€¢ Strings: Enclose in " or ' if they contain spaces or are a special character, otherwise just as they are, e.g. "My Spaced String" and mystring both work.
â€¢ Arrays: Enclose in [] and separate elements with commas. Each element will be recursively parsed as a potential variable.
â€¢ Objects: Enclose in {} and treat like pseudo-JSON, e.g. {abc: 123}. OR prefix with a ? and use query string formatting e.g. ?abc=123
**â—¦â—¦â–¹ Object shortcuts (works for both JSON and querystring syntaxes):**
â–«â–«â–«â–«â–¹ Key without a value: {abc} will be expanded to {abc: "abc"}
â–«â–«â–«â–«â–¹ Key without a value, but with a special value alias postfix: {abc.} becomes {abc: true} and {abc!} is {abc: false}
â–«â–«â–«â–«â–¹ Both keys and values will be parsed as potential variables, with the result of key parsing needing to be a string.
â–«â–«â–«â–«â–¹ Recursion with a '.', for example myValue.level1.level2 will give "abc" if myValue is {level1: {level2: "abc"}}
**â—¦â—¦â–¹ Live framework values:**
â–«â–«â–«â–«â–¹ #cell will expand to the current value of the named cell: e.g. #myCell will give the current value of the cell named "myCell"
â–«â–«â–«â–«â–¹ ~context will expand to the current value of named context variable: e.g. ~test will give the value of the context variable named "test"
â–«â–«â–«â–«â–¹ Dot based recursion also works as expected for #cells and ~context variables: e.g. both #myCell.abc.def and ~test.one.two.three work fine.
â–«â–«â–«â–«â–¹ @fields, labels and the "passed in value alias" of '$' are NOT supported in the command line environment because they are functionally meaningless in this context.
---
This is a basic overview to get you started. To explore specific commands and their usage, type $\`help [command]\` in the console. For example:
$`help show`
...
Happy coding! ðŸš€ðŸš€ðŸš€
---
